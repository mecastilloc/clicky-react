{"version":3,"sources":["components/Card/index.js","components/Inst/index.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["ClickCard","props","react_default","a","createElement","className","onClick","randomize","selectedCard","id","handleClick","alt","name","src","image","Inst","document","getElementsByClassName","classList","add","Header","style","cursor","remove","href","concat","class","message","uScore","maxScore","App","state","cards","data","selectedTeams","messageText","randomCards","array","currentIndex","length","randomIndex","Math","floor","random","temporaryValue","_this","setState","renderCards","map","card","key","Card","selected","_document$getElements","getElementsByTagName","selector","Object","slicedToArray","includes","setTimeout","toConsumableArray","components_Inst","components_Header","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ffc946fe.chunk.js","sourcesContent":["import React from 'react';\n// import './ClickCard.css';\n\nfunction handleClick(props) {\n\tprops.randomize();\n\tprops.selectedCard(props.id);\n}\n\n\nfunction ClickCard(props) {\n\treturn (\n\t\t<div className=\"card img-container\" onClick={() => handleClick(props)}>\n\t\t\t<img alt={props.name} src={props.image} />\n\t\t</div>\n\t)\n}\n\n\n\n\nexport default ClickCard","import React from 'react';\n\nfunction Inst() {\n\treturn (\n\t\t<div className=\"instructions\">\n\t\t\t<div className=\"modal-content\">\n\t\t\t\t<h4 className=\"center\">Game Rules</h4>\n\t\t\t\t<ol>\n\t\t\t\t\t<li>The goal is to select all images just once</li>\n\t\t\t\t\t<li>When you click an image, the images will rearrange.</li>\n\t\t\t\t\t<li>You Lose if you select one team twice</li>\n\t\t\t\t\t<li>You Win if you select all teams in 12 clicks</li>\n\t\t\t\t\t<li>The game restarts after any  Win or Loose</li>\n\t\t\t\t</ol>\n\t\t\t</div>\n\t\t\t<br />\n\t\t\t<div className=\"modal-footer center\">\n\t\t\t\t<button className=\"btn\" onClick={() => {\n\t\t\t\t\tdocument.getElementsByClassName('instructions')[0].classList.add('hide');\n\t\t\t\t}}>Play !</button>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\n\n\n\n\nexport default Inst;","import React from 'react';\n\n\n\n\n\nfunction Header(props) {\n\treturn (\n\t\t<div className=\"navbar-fixed\">\n\t\t\t<nav>\n\t\t\t\t<div className=\"nav-wrapper container\">\n\t\t\t\t\t<span style={{ cursor: 'pointer' }} className='left' onClick={() => {\n\t\t\t\t\t\tdocument.getElementsByClassName('instructions')[0].classList.remove('hide');\n\t\t\t\t\t}}>Game Rules</span>\n\t\t\t\t\t<span href=\"/\" className={`brand-logo center ${props.class}`}>{props.message}</span>\n\t\t\t\t\t<ul className='right'>\n\t\t\t\t\t\t<li id=\"points\">Points: {props.uScore}</li>\n\t\t\t\t\t\t<li id=\"max\" >Max: {props.maxScore}</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t</nav>\n\t\t</div>\n\t)\n}\n\n\n\nexport default Header;\n\n\n\n\n\n\n\n\n","import React, { Component } from 'react';\nimport data from './data.json';\nimport Card from './components/Card';\nimport Inst from './components/Inst';\nimport Header from './components/Header';\n\n\nclass App extends Component {\n  state = {\n    cards: data,\n    selectedTeams: [],\n    uScore: 0,\n    maxScore: 0,\n    messageText: \"Memory Game\",\n    class: \"start\"\n  }\n\n\n  // Randomize array function from 'Fisher-Yates Shuffle'\n  randomCards = (array) => {\n    let currentIndex = array.length;\n\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      let randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      // And swap it with the current element.\n      let temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    this.setState({ cards: data });\n  }\n\n  renderCards = () => {\n    return this.state.cards.map(card => (\n      <section className='col s4 m3 l3' key={card.id} id={card.id}>\n        <Card\n          name={card.name}\n          image={card.image}\n          randomize={() => { this.randomCards(this.state.cards) }}\n          selectedCard={() => { this.selected(card.id) }} />\n      </section>\n    )\n    )\n  }\n\n\n  selected = (id) => {\n    const [selector] = document.getElementsByTagName('body');\n\n    if (this.state.selectedTeams.includes(id)) {\n      this.setState({ uScore: 0, selectedTeams: [] })\n\n      selector.classList.add('shakeWrapper')\n      this.setState({ messageText: 'WRONG! Try Again', class: 'loose' })\n      setTimeout(() => {\n        selector.classList.remove('shakeWrapper');\n      }, 500);\n      setTimeout(() => {\n        this.setState({ messageText: \"Memory Game\", class: 'start' })\n      }, 2500)\n\n    } else {\n      this.setState({ selectedTeams: [...this.state.selectedTeams, id] })\n      this.setState({ uScore: this.state.uScore + 1 })\n      if (this.state.uScore >= this.state.maxScore) {\n        this.setState({ maxScore: this.state.uScore + 1 })\n\n      }\n      if (this.state.uScore === 11) {\n        this.setState({ messageText: 'You Won!!!', class: 'win' })\n\n        setTimeout(() => {\n          this.setState({ messageText: 'Memory Game', class: 'start' })\n          this.setState({ uScore: 0, selectedTeams: [], cards: data })\n        }, 2500)\n      }\n    }\n  }\n\n\n  render() {\n    return (\n\n      <div className=\"container-fluid\">\n        <Inst />\n        <Header \n        class={this.state.class} \n        message={this.state.messageText} \n        uScore={this.state.uScore} \n        maxScore={this.state.maxScore} />\n        \n        <div className=\"container row cardWrapper\">\n          {this.renderCards(this.state.cards)}\n        </div>\n\n      </div>\n    );\n  }\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}